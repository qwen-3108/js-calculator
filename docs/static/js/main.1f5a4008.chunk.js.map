{"version":3,"sources":["components/compute.js","components/inputControl.js","components/memory.js","components/Display.js","components/Buttons.js","components/App.js","serviceWorker.js","index.js"],"names":["compute","str","numArr","match","opArr","escape","result","cleanedArr","i","length","tempNum","search","slice","push","tempOp","OP","op","func","x","y","includes","index","indexOf","a","Number","b","splice","refine","Math","floor","toString","toFixed","inputControl","numStr","state","input","output","inp","out","opRegex","test","data","memory","createStore","action","type","inpStr","outStr","Display","this","props","id","Component","ConnDisplay","connect","Buttons","numPad","click","logInput","value","className","clearInput","map","onClick","key","calcInput","ConnButtons","dispatch","num","log","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAkGeA,EAhGC,SAACC,GACf,IAEIC,EAASD,EAAIE,MAFF,wBAGXC,EAAQH,EAAIE,MAFF,uBAId,GAAc,OAAVC,EAEF,MAAO,CAACC,OAAOJ,EAAIK,OAAO,MAM1B,IADA,IAAIC,EAAa,GACRC,EAAI,EAAGA,EAAIJ,EAAMK,OAAQD,IAAK,CAErC,IAAIE,EAAUR,EAAOM,GAClBE,EAAQC,OAAO,UAAU,IAC1BD,EAAUA,EAAQE,MAAM,IAE1BL,EAAWM,KAAKH,GAEhB,IAAII,EAASV,EAAMI,IACnBM,EAASA,EAAOF,MAAM,IACZH,OAAO,IACfK,EAAmC,MAA1BA,EAAOA,EAAOL,OAAO,GAC1BK,EAAOA,EAAOL,OAAO,GACrBK,EAAOA,EAAOL,OAAO,IAE3BF,EAAWM,KAAKC,GAIlB,IAAIJ,EAAUR,EAAOA,EAAOO,OAAS,GAClCC,EAAQC,OAAO,WAAW,IAC3BD,EAAUA,EAAQE,MAAM,IAE1BL,EAAWM,KAAKH,GAchB,IARA,IAAMK,EAAK,CAAC,CACVC,GAAI,IACJC,KAAM,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IACnB,CACDH,GAAI,IACJC,KAAM,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAGbX,EAAI,EAAGA,EAAIO,EAAGN,OAAQD,IAC7B,KAAOD,EAAWa,SAASL,EAAGP,GAAGQ,KAAK,CACpC,IAAIK,EAAQd,EAAWe,QAAQP,EAAGP,GAAGQ,IACjCO,EAAIC,OAAOjB,EAAWc,EAAQ,IAC9BI,EAAID,OAAOjB,EAAWc,EAAQ,IAC9Bf,EAASS,EAAGP,GAAGS,KAAKM,EAAGE,GAC3BlB,EAAWmB,OAAOL,EAAQ,EAAG,EAAGf,GAOpC,IADA,IAAIA,EAASkB,OAAOjB,EAAW,IACtBC,EAAI,EAAGA,EAAID,EAAWE,OAAS,EAAGD,GAAK,EAC9C,OAAQD,EAAWC,IACjB,IAAK,IAEHF,GADQkB,OAAOjB,EAAWC,EAAI,IAE9B,MACF,IAAK,IAEHF,GADQkB,OAAOjB,EAAWC,EAAI,IAmBpC,MAAO,CAACmB,OAAO,KAAKrB,QARNA,EADAsB,KAAKC,MAAMvB,IAGbwB,WAAWrB,OAAS,EACtBH,EAAOyB,QAAQ,GAEfzB,IChCC0B,EAvDM,SAACC,EAAQC,GAAW,IAQnCC,EACAC,EAPIC,EACJH,EADFC,MAAmBG,EACjBJ,EADUE,OAGRG,EAAU,SAMhB,OAASF,EAAKA,EAAI5B,OAAS,IAEzB,IAAK,IACH0B,EAAQI,EAAQC,KAAKP,GAAUK,EAAML,EAASA,EAC9CG,EAASH,EACT,MAEF,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACHE,EAAQE,EAAIJ,EACZG,EAASH,EACT,MAEF,IAAK,IAtBW,WAuBDO,KAAKH,IAAY,MAANA,GACtBF,EAAkB,MAATF,EAAeI,EAAIA,EAAIzB,MAAM,EAAGyB,EAAIA,EAAI5B,OAAO,IAAIwB,EAC5DG,EAAmB,MAATH,EAAeK,EAAIA,EAAI1B,MAAM,EAAG0B,EAAIA,EAAI7B,OAAO,IAAIwB,IAE7DE,EAAQE,EAAIJ,EACZG,EAASE,EAAIL,GAEf,MAEF,QACE,GA/BgB,SA+BAO,KAAKH,IAAe,MAATJ,EAAa,CACtCE,EAAME,EACND,EAAOE,EACP,MAEAH,EAAQE,EAAIJ,EACZG,EAASG,EAAQC,KAAKP,GAASA,EAASK,EAAIL,EAKlD,MAAO,CACLI,IAAKF,EACLG,IAAKF,IC7CHK,EAAO,CAACN,MAAO,IAAKC,OAAO,KAuCpBM,EAASC,aAtBN,WAA2B,IAA1BT,EAAyB,uDAAjBO,EAAMG,EAAW,uCAExC,OAAQA,EAAOC,MACX,IAAK,MAAL,MACuBb,EAAaY,EAAOX,OAAQC,GAAzCG,EADV,EACUA,IAAKC,EADf,EACeA,IACb,MAAO,CAACH,MAAOE,EAAKD,OAAQE,GAE9B,IAAK,QACH,MAAO,CAACH,MAAO,IAAKC,OAAO,KAE7B,IAAK,OAAL,MACyBpC,EAAQkC,EAAMC,OAAhC9B,EADP,EACOA,OAAQC,EADf,EACeA,OACTwC,EAASzC,GAAkB6B,EAAMC,MAAM,IACvCY,EAAS1C,GAAkBC,EAE/B,MAAO,CAAC6B,MAAMW,EAAOhB,WAAYM,OAAOW,EAAOjB,YAEjD,QACE,OAAOI,M,4BCrCTc,G,6KAEM,IAAD,EACiBC,KAAKC,MAAMR,OAA5BP,EADA,EACAA,MAAOC,EADP,EACOA,OACd,OACE,yBAAKe,GAAG,UACN,yBAAKA,GAAG,OAAM,2BAAIhB,IAClB,yBAAKgB,GAAG,WAAU,2BAAIf,S,GAPRgB,cAePC,EADKC,aD8BW,SAACpB,GAAD,MAAY,CAACQ,OAAOR,KC9B/BoB,CAAyBN,GCdvCO,G,6KAGF,IAkBMC,EAlBW,CACf,CAACL,GAAG,QAAQM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC3D,CAACT,GAAG,QAAQM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC3D,CAACT,GAAG,OAAOM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC1D,CAACT,GAAG,MAAMM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,QACzD,CAACT,GAAG,OAAOM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC1D,CAACT,GAAG,OAAOM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC1D,CAACT,GAAG,MAAMM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OACzD,CAACT,GAAG,WAAWM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,QAC9D,CAACT,GAAG,MAAMM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OACzD,CAACT,GAAG,MAAMM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OACzD,CAACT,GAAG,QAAQM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC3D,CAACT,GAAG,WAAWM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,QAC9D,CAACT,GAAG,QAAQM,MAAMR,KAAKC,MAAMW,WAAWF,MAAM,MAAOC,UAAU,SAC/D,CAACT,GAAG,OAAOM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC1D,CAACT,GAAG,UAAUM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,OAC7D,CAACT,GAAG,SAASM,MAAMR,KAAKC,MAAMQ,SAASC,MAAM,IAAKC,UAAU,SAEtCE,KAAI,SAAC5C,GAAD,OAC1B,4BAAQiC,GAAIjC,EAAEiC,GAAIS,UAAW1C,EAAE0C,UAAWG,QAAS,kBAAI7C,EAAEuC,MAAMvC,EAAEyC,QAAQK,IAAK9C,EAAEiC,IAAKjC,EAAEyC,UAGzF,OACE,yBAAKR,GAAG,cACN,yBAAKS,UAAU,WACZJ,GAEH,yBAAKI,UAAU,SACf,4BAAQT,GAAG,SAASY,QAASd,KAAKC,MAAMe,WAAxC,W,GA/Bcb,cAwCPc,EADKZ,YAAQ,MFMM,SAACa,GAAD,MAAe,CAACT,SAAS,SAACU,GAAD,OAAOD,EAxCtD,SAACC,GAAD,MAAU,CACpBvB,KAAM,MACNZ,OAAQmC,GAsCiEC,CAAID,KAAOP,WAAW,kBAAIM,EAnChF,CACnBtB,KAAM,WAkC+GoB,UAAU,kBAAIE,EA/BjH,CAClBtB,KAAM,aEwBYS,CAAkCC,GC1BvCe,G,6KAVX,OACE,yBAAKnB,GAAG,cACN,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUC,cCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvE,MACvB,2DCXNwE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOpC,GACf,kBAAC,EAAD,QAGJqC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f5a4008.chunk.js","sourcesContent":["/* Computing function */\r\n\r\nconst compute = (str) => {\r\n  let numRegex = /(?:[+/*-]-)?[0-9.]+/g;\r\n  let opRegex = /[\\d.][+/*-]+(?=\\d)/g;\r\n  let numArr = str.match(numRegex);\r\n  let opArr = str.match(opRegex);\r\n\r\n  if (opArr === null) {\r\n\r\n    return {escape:str,result:null};\r\n\r\n  } else {\r\n\r\n    //cleaning numArr and opArr: removing prepending character & choosing the right operator\r\n    let cleanedArr = [];\r\n    for (let i = 0; i < opArr.length; i++) {\r\n\r\n      let tempNum = numArr[i];\r\n      if(tempNum.search(/[+/*-]/)>0){\r\n        tempNum = tempNum.slice(1);\r\n      }\r\n      cleanedArr.push(tempNum);\r\n\r\n      let tempOp = opArr[i];\r\n      tempOp = tempOp.slice(1);\r\n      if(tempOp.length>1){\r\n        tempOp = tempOp[tempOp.length-1]==='-'\r\n          ? tempOp[tempOp.length-2]\r\n          : tempOp[tempOp.length-1];\r\n      }\r\n      cleanedArr.push(tempOp);\r\n    }\r\n\r\n    //pushing in the last number\r\n    let tempNum = numArr[numArr.length - 1];\r\n    if(tempNum.search(/[+/*-]/)>=0){\r\n      tempNum = tempNum.slice(1);\r\n    }\r\n    cleanedArr.push(tempNum);\r\n    // console.log('numArr:', numArr);\r\n    // console.log('opArr:', opArr);\r\n    // console.log('cleanedArr:', cleanedArr);\r\n\r\n    //multiplication, division\r\n    const OP = [{\r\n      op: '*',\r\n      func: (x, y) => x * y\r\n    }, {\r\n      op: '/',\r\n      func: (x, y) => x / y\r\n    }];\r\n\r\n    for (let i = 0; i < OP.length; i++) {\r\n      while (cleanedArr.includes(OP[i].op)) {\r\n        let index = cleanedArr.indexOf(OP[i].op);\r\n        let a = Number(cleanedArr[index - 1]);\r\n        let b = Number(cleanedArr[index + 1]);\r\n        let result = OP[i].func(a, b);\r\n        cleanedArr.splice(index - 1, 3, result);\r\n        //console.log(cleanedArr);\r\n      }\r\n    }\r\n\r\n    //addition, subtraction\r\n    let result = Number(cleanedArr[0]);\r\n    for (let i = 1; i < cleanedArr.length - 1; i += 2) {\r\n      switch (cleanedArr[i]) {\r\n        case '+':\r\n          let a = Number(cleanedArr[i + 1]);\r\n          result += a;\r\n          break;\r\n        case '-':\r\n          let b = Number(cleanedArr[i + 1]);\r\n          result -= b;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    //console.log(result);\r\n\r\n    //rounding\r\n    let integer = Math.floor(result);\r\n    let decimal = result - integer;\r\n    let value = '';\r\n    if (decimal.toString().length > 6) {\r\n      value = result.toFixed(4);\r\n    } else {\r\n      value = result;\r\n    }\r\n    //console.log(decimal.toString(), decimal.toString().length, value);\r\n    return {refine:null,result:value};\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default compute;\r\n","/*Enabling selective logging of user input*/\r\n\r\nconst inputControl = (numStr, state) => {\r\n  const {\r\n    input:inp , output:out\r\n  } = state;\r\n  const zeroRegex = /[+/*-]0$/;\r\n  const opRegex = /[+/*-]/;\r\n  const decimalRegex =/\\.\\d*$/;\r\n\r\n  let input;\r\n  let output;\r\n\r\n  switch ( inp[ inp.length - 1]) {\r\n\r\n    case '=': //Previous input was equal button\r\n      input = opRegex.test(numStr) ? out + numStr : numStr;\r\n      output = numStr;\r\n      break;\r\n\r\n    case '+':\r\n    case '-':\r\n    case '*':\r\n    case '/': //Previous input was an operator\r\n      input = inp+numStr;\r\n      output = numStr;\r\n      break;\r\n\r\n    case '0': //Previous input was 0\r\n      if(zeroRegex.test(inp)||inp==='0'){\r\n        input = (numStr==='0')? inp:inp.slice(0, inp[inp.length-1])+numStr;\r\n        output = (numStr==='0')? out:out.slice(0, out[out.length-1])+numStr;\r\n      }else{\r\n        input = inp+numStr;\r\n        output = out+numStr;\r\n      }\r\n      break;\r\n\r\n    default: //Previous input was 1-9 or decimal\r\n      if(decimalRegex.test(inp)&&numStr==='.'){\r\n        input=inp;\r\n        output=out;\r\n        break;\r\n      }else{\r\n        input = inp+numStr;\r\n        output = opRegex.test(numStr)? numStr : out+numStr;\r\n      }\r\n\r\n  }\r\n\r\n  return {\r\n    inp: input,\r\n    out: output,\r\n  };\r\n\r\n}\r\n\r\nexport default inputControl;\r\n\r\n/*Testing\r\ncompute('-5-5');\r\ncompute('-5--5');\r\ncompute('5/-5');\r\ncompute('5+5+');*/\r\n\r\n\r\n/*case '.': //Previous input was decimal character\r\n  if(numStr==='.'||(opRegex.test(numStr)&&opRegex.test(inp[inp.length-2]))){\r\n    input = inp;\r\n    output = out;\r\n  }else{\r\n    input = inp+numStr;\r\n    output = opRegex.test(numStr)? numStr : out+numStr;\r\n  }\r\n  break;*/\r\n","/*STORE DEFINITION*/\r\n\r\nimport { createStore } from 'redux';\r\nimport compute from './compute';\r\nimport inputControl from './inputControl';\r\n\r\n//state initialization\r\nconst data = {input: '0', output:'0'};\r\n\r\n//action creators\r\nconst log = (num) => ({\r\n  type: 'LOG',\r\n  numStr: num\r\n});\r\n\r\nconst clear = () => ({\r\n  type: 'CLEAR'\r\n});\r\n\r\nconst calc = () => ({\r\n  type: 'CALC'\r\n});\r\n\r\n//reducer\r\nconst reducer = (state = data, action) => {\r\n\r\n  switch (action.type) {\r\n      case 'LOG':\r\n        const { inp, out } = inputControl(action.numStr, state);\r\n        return {input: inp, output: out};\r\n\r\n      case 'CLEAR':\r\n        return {input: '0', output:'0'};\r\n\r\n      case 'CALC':\r\n        let {escape, result} = compute(state.input);\r\n        let inpStr = escape ? escape : state.input+'=';\r\n        let outStr = escape ? escape : result;\r\n        //console.log(compute(state), result);\r\n        return {input:inpStr.toString(), output:outStr.toString()};\r\n\r\n      default:\r\n        return state;\r\n  }\r\n}\r\n\r\nexport const memory = createStore(reducer);\r\n\r\n//mapStateToProps & mapDispatchToProps\r\nexport const mapStateToProps = (state) => ({memory:state});\r\nexport const mapDispatchToProps = (dispatch) => ({logInput:(num)=>dispatch(log(num)), clearInput:()=>dispatch(clear()),calcInput:()=>dispatch(calc())});\r\n","import React, { Component } from 'react';\r\nimport { mapStateToProps } from './memory';\r\nimport { connect } from 'react-redux';\r\nimport './Display.css';\r\n\r\nclass Display extends Component {\r\n\r\n  render() {\r\n    const {input, output} = this.props.memory;\r\n    return (\r\n      <div id=\"screen\">\r\n        <div id=\"log\"><p>{input}</p></div>\r\n        <div id=\"display\"><p>{output}</p></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst ConnDisplay = connect(mapStateToProps)(Display);\r\nexport default ConnDisplay;\r\n","import React, { Component } from 'react';\r\nimport { mapDispatchToProps } from './memory';\r\nimport { connect } from 'react-redux';\r\nimport './Buttons.css';\r\n\r\nclass Buttons extends Component {\r\n\r\n  render() {\r\n    const template = [\r\n      {id:\"seven\",click:this.props.logInput,value:'7', className:\"num\"},\r\n      {id:\"eight\",click:this.props.logInput,value:'8', className:\"num\"},\r\n      {id:\"nine\",click:this.props.logInput,value:'9', className:\"num\"},\r\n      {id:\"add\",click:this.props.logInput,value:'+', className:\"oprt\"},\r\n      {id:\"four\",click:this.props.logInput,value:'4', className:\"num\"},\r\n      {id:\"five\",click:this.props.logInput,value:'5', className:\"num\"},\r\n      {id:\"six\",click:this.props.logInput,value:'6', className:\"num\"},\r\n      {id:\"subtract\",click:this.props.logInput,value:'-', className:\"oprt\"},\r\n      {id:\"one\",click:this.props.logInput,value:'1', className:\"num\"},\r\n      {id:\"two\",click:this.props.logInput,value:'2', className:\"num\"},\r\n      {id:\"three\",click:this.props.logInput,value:'3', className:\"num\"},\r\n      {id:\"multiply\",click:this.props.logInput,value:'*', className:\"oprt\"},\r\n      {id:\"clear\",click:this.props.clearInput,value:'CLR', className:\"clear\"},\r\n      {id:\"zero\",click:this.props.logInput,value:'0', className:\"num\"},\r\n      {id:\"decimal\",click:this.props.logInput,value:'.', className:\"num\"},\r\n      {id:\"divide\",click:this.props.logInput,value:'/', className:\"oprt\"}\r\n    ];\r\n    const numPad = template.map((x)=>(\r\n      <button id={x.id} className={x.className} onClick={()=>x.click(x.value)} key={x.id}>{x.value}</button>\r\n    ));\r\n\r\n    return (\r\n      <div id=\"button-pad\">\r\n        <div className=\"num-pad\">\r\n          {numPad}\r\n        </div>\r\n        <div className=\"enter\">\r\n        <button id=\"equals\" onClick={this.props.calcInput}>=</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst ConnButtons = connect(null, mapDispatchToProps)(Buttons);\r\nexport default ConnButtons;\r\n","import React, { Component } from 'react';\r\nimport ConnDisplay from './Display';\r\nimport ConnButtons from './Buttons';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"calculator\">\r\n        <ConnDisplay />\r\n        <ConnButtons />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { memory } from './components/memory';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={memory}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}